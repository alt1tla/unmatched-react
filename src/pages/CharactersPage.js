import { useEffect, useState } from "react";

// –ü–æ–¥—Å—Ç–∞–≤—å —Å–≤–æ–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ .env
const SHEET_ID = process.env.REACT_APP_GOOGLE_SHEET_ID;
const API_KEY = process.env.REACT_APP_GOOGLE_API_KEY;
const RANGE = "–ë–æ–π—Ü—ã!A:Z";

// –ö–∞—Ä—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –∏–º–µ–Ω–∏ –±–æ–π—Ü–∞
const fighterImages = {
  –ú–µ–¥—É–∑–∞: "/images/medusa.webp",
  "–ö–æ—Ä–æ–ª—å –ê—Ä—Ç—É—Ä": "/images/arthur.jpg",
  –ê–ª–∏—Å–∞: "/images/alice.webp",
  –°–∏–Ω–¥–±–∞–¥: "/images/sindbad.webp",
  –†–∞–ø—Ç–æ—Ä—ã: "https://example.com/sinbad.jpg",
  "–†–æ–±–µ—Ä—Ç –ú–∞–ª–¥—É–Ω": "https://example.com/sinbad.jpg",
  –î—Ä–∞–∫—É–ª–∞: "https://example.com/sinbad.jpg",
  –ù–µ–≤–∏–¥–∏–º–∫–∞: "https://example.com/sinbad.jpg",
  "–î–æ–∫—Ç–æ—Ä –î–∂–µ–∫–∏–ª": "https://example.com/sinbad.jpg",
  "–®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å": "https://example.com/sinbad.jpg",
  –ê—Ö–∏–ª–ª–µ—Å: "https://example.com/sinbad.jpg",
  "–ö—Ä–æ–≤–∞–≤–∞—è –ú—ç—Ä–∏": "https://example.com/sinbad.jpg",
  "–°—É–Ω—å –£–∫—É–Ω": "https://example.com/sinbad.jpg",
  –ô–µ–Ω–Ω–µ–Ω–≥–∞: "https://example.com/sinbad.jpg",
  "–¢-–†–µ–∫—Å": "https://example.com/sinbad.jpg",
  "–î-—Ä –≠–ª–ª–∏ –°—ç—Ç—Ç–ª–µ—Ä": "https://example.com/sinbad.jpg",
  "–ß–µ–ª–æ–≤–µ–∫-–ø–∞—É–∫": "https://example.com/sinbad.jpg",
  "–û–Ω–∞-–•–∞–ª–∫": "https://example.com/sinbad.jpg",
  "–î–æ–∫—Ç–æ—Ä –°—Ç—Ä–µ–Ω–¥–∂": "https://example.com/sinbad.jpg",
  "–û–¥–∞ –ù–æ–±—É–Ω–∞–≥–∞": "https://example.com/sinbad.jpg",
  "–¢–æ–º–æ–µ –ì–æ–¥–∑–µ–Ω": "https://example.com/sinbad.jpg",
  –®–µ–∫—Å–ø–∏—Ä: "https://example.com/sinbad.jpg",
  "–°–≤–æ–µ–Ω—Ä–∞–≤–Ω—ã–µ —Å–µ—Å—Ç—Ä—ã": "https://example.com/sinbad.jpg",
  –ì–∞–º–ª–µ—Ç: "https://example.com/sinbad.jpg",
  –¢–∏—Ç–∞–Ω–∏—è: "https://example.com/sinbad.jpg",
};

export default function CharactersPage() {
  const [fighters, setFighters] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    async function fetchSheet() {
      try {
        const res = await fetch(
          `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${RANGE}?key=${API_KEY}`
        );
        const json = await res.json();

        if (json.error) {
          setError(json.error.message);
          setLoading(false);
          return;
        }

        const rows = json.values;
        if (!rows || rows.length === 0) {
          setError("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
          setLoading(false);
          return;
        }

        const headers = rows[0];
        const rowsData = rows
          .slice(1)
          .map((row) =>
            Object.fromEntries(headers.map((h, i) => [h.trim(), row[i] || ""]))
          );

        setFighters(rowsData);
      } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:", e);
        setError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö");
      } finally {
        setLoading(false);
      }
    }

    fetchSheet();
  }, []);

  const filteredFighters = fighters.filter((f) =>
    f["–ë–æ–µ—Ü"]?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  if (loading) return <p>–ó–∞–≥—Ä—É–∑–∫–∞ –±–æ–π—Ü–æ–≤...</p>;
  if (error) return <p style={{ color: "red" }}>{error}</p>;

  return (
    <div style={{ padding: "1rem", fontFamily: "Arial, sans-serif" }}>
      <h1
        style={{ fontSize: "28px", fontWeight: "bold", marginBottom: "1rem" }}
      >
        –ë–æ–π—Ü—ã Unmatched
      </h1>

      <input
        type="text"
        placeholder="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏..."
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        style={{
          marginBottom: "1rem",
          padding: "0.5rem",
          width: "100%",
          maxWidth: "400px",
          fontSize: "16px",
        }}
      />

      <div
        style={{
          display: "grid",
          gridTemplateColumns: "repeat(3, 1fr)",
          gap: "1.5rem",
        }}
      >
        {filteredFighters.map((f, idx) => {
          const isMelee = f["–ê—Ç–∞–∫–∞"]?.toLowerCase() === "–±–ª–∏–∂–Ω—è—è";
          const attackIcon = isMelee ? "üó°Ô∏è" : "üèπ";

          const assistantAttackIcon =
            f["–ê—Ç–∞–∫–∞ –ü–æ–º–æ—â–Ω–∏–∫"]?.toLowerCase() === "–±–ª–∏–∂–Ω—è—è" ? "üó°Ô∏è" : "üèπ";

          return (
            <div
              key={idx}
              style={{
                border: "1px solid #ddd",
                borderRadius: "12px",
                padding: "1rem",
                backgroundColor: "#fff",
                boxShadow: "0 3px 10px rgba(0,0,0,0.1)",
                display: "flex",
                flexDirection: "column",
                justifyContent: "space-between",
              }}
            >
              {fighterImages[f["–ë–æ–µ—Ü"]] && (
                <img
                  src={fighterImages[f["–ë–æ–µ—Ü"]]}
                  alt={f["–ë–æ–µ—Ü"]}
                  style={{
                    width: "100%",
                    height: "180px",
                    objectFit: "cover",
                    borderRadius: "8px",
                    marginBottom: "0.75rem",
                  }}
                />
              )}

              <h2
                style={{
                  fontSize: "20px",
                  fontWeight: "bold",
                  marginBottom: "0.5rem",
                }}
              >
                {f["–ë–æ–µ—Ü"]}
              </h2>

              {/* –ë–ª–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ */}
              <div>
                <p
                  style={{
                    display: "flex",
                    gap: "1rem",
                    alignItems: "center",
                    justifyContent: "space-between",
                    marginInlineEnd: "1.5rem",
                  }}
                >
                  <span>
                    ‚ù§Ô∏è <strong>–ó–¥–æ—Ä–æ–≤—å–µ:</strong> {f["–ó–¥–æ—Ä–æ–≤—å–µ"]}
                  </span>
                  <span>
                    {attackIcon} <strong>–ê—Ç–∞–∫–∞:</strong> {f["–ê—Ç–∞–∫–∞"]}
                  </span>
                </p>
                <p>
                  üë£ <strong>–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ:</strong> {f["–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ"]}
                </p>
                <p>
                  ‚ú® <strong>–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:</strong>
                  <br /> {f["–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å"]}
                </p>
              </div>

              {/* –ë–ª–æ–∫ –ø–æ–º–æ—â–Ω–∏–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å */}
              {f["–ü–æ–º–æ—â–Ω–∏–∫"] && f["–ü–æ–º–æ—â–Ω–∏–∫"] !== "-" && (
                <div
                  style={{
                    padding: "0.5rem",
                    backgroundColor: "#f9f9f9",
                    borderRadius: "8px",
                    marginBottom: "1rem",
                  }}
                >
                  <p>
                    ü§ù <strong>–ü–æ–º–æ—â–Ω–∏–∫:</strong> {f["–ü–æ–º–æ—â–Ω–∏–∫"]}
                  </p>
                  <p
                    style={{
                      display: "flex",
                      gap: "1rem",
                      alignItems: "center",
                      justifyContent: "space-between",
                      marginInlineEnd: "1.5rem",
                    }}
                  >
                    <span>
                      üíû <strong>–ó–¥–æ—Ä–æ–≤—å–µ:</strong> {f["–ó–¥–æ—Ä–æ–≤—å–µ –ü–æ–º–æ—â–Ω–∏–∫"]}
                    </span>
                    <span>
                      {assistantAttackIcon} <strong>–ê—Ç–∞–∫–∞:</strong>{" "}
                      {f["–ê—Ç–∞–∫–∞ –ü–æ–º–æ—â–Ω–∏–∫"]}
                    </span>
                  </p>
                </div>
              )}

              <p>
                üì¶ <strong>–ù–∞–±–æ—Ä:</strong> {f["–ù–∞–±–æ—Ä"]}
              </p>
            </div>
          );
        })}
      </div>
    </div>
  );
}
